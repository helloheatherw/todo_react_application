{"version":3,"sources":["icons/plus.svg","icons/confirm.svg","icons/close.svg","Header/Header.js","AddTask/AddTask.js","RemainingTasks/RemainingTasks.js","TaskItem/TaskItem.js","TaskList/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","AddTask","htmlFor","type","id","placeholder","aria-label","src","addIcon","alt","RemainingTasks","TaskItem","props","status","text","completeIcon","aria-hidden","deleteIcon","TaskList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,uPCQ5BC,MAJf,WACE,OAAO,4BAAQC,UAAU,gBAAlB,W,sBCkBMC,MAjBf,WACE,OACI,kBAAC,WAAD,KACE,0BAAMD,UAAU,wBACZ,2BAAOA,UAAU,UAAUE,QAAQ,aAAnC,QACA,2BAAOC,KAAK,OAAOH,UAAU,qCAAqCI,GAAG,YAAYC,YAAY,8BAC7F,4BAAQF,KAAK,SAASH,UAAU,wCAAhC,QAGJ,4BAAQM,aAAW,WAAWN,UAAU,6BACpC,yBAAKO,IAAMC,IAAUR,UAAU,UAAUS,IAAI,Q,MCR1CC,MAJf,WACE,OAAO,uBAAGV,UAAU,2BAAb,4B,sCCuBMW,MArBf,SAAkBC,GAChB,OACE,wBAAIZ,UAAS,qBAAiBY,EAAMC,SAClC,0BAAMb,UAAU,cAAeY,EAAME,MACrC,yBAAKd,UAAU,iBACM,WAAjBY,EAAMC,QACJ,4BAAQV,KAAK,SAASH,UAAU,6CAC9B,yBAAKO,IAAMQ,IAAeN,IAAI,GAAGT,UAAU,iBAC3C,0BAAMA,UAAU,eAAegB,cAAY,SAA3C,aAIN,4BAAQb,KAAK,SAASH,UAAU,2CAC9B,yBAAKO,IAAMU,IAAaR,IAAI,GAAGT,UAAU,eACzC,0BAAMA,UAAU,eAAegB,cAAY,SAA3C,c,MCCKE,MAhBf,WACE,OACE,yBAAKlB,UAAU,aACX,wBAAIA,UAAU,yBACV,kBAAC,EAAD,CAAUc,KAAK,kCAAkCD,OAAO,WACxD,kBAAC,EAAD,CAAUC,KAAK,2BAA2BD,OAAO,WACjD,kBAAC,EAAD,CAAUC,KAAK,0BAA0BD,OAAO,YAEpD,wBAAIb,UAAU,2BACV,kBAAC,EAAD,CAAUc,KAAK,kCAAkCD,OAAO,aACxD,kBAAC,EAAD,CAAUC,KAAK,4BAA4BD,OAAO,gB,MCI/CM,MAXf,WACE,OACE,yBAAKnB,UAAU,MAAMI,GAAG,OACtB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41261c3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plus.32dc288a.svg\";","module.exports = __webpack_public_path__ + \"static/media/confirm.d033bbc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.18445307.svg\";","import React from 'react';\n\nimport './Header.css';\n\nfunction Header() {\n  return <header className=\"main-heading\">To Do!</header>;\n}\n\nexport default Header;","import React, { Fragment } from 'react';\n\nimport addIcon from \"../icons/plus.svg\"\n\nimport './AddTask.css';\n\nfunction AddTask() {\n  return (\n      <Fragment>\n        <form className=\"form-inline add-task\">\n            <label className=\"sr-only\" htmlFor=\"taskInput\">Task</label>\n            <input type=\"text\" className=\"form-control add-task__input-field\" id=\"taskInput\" placeholder=\"Something I need to do...\"/>\n            <button type=\"submit\" className=\"btn btn-primary add-task__add-button\">Add</button>\n        </form> \n\n        <button aria-label=\"add task\" className=\"add-task--floating-button\">\n            <img src={ addIcon } className=\"add-svg\" alt=\"\"/>\n        </button>\n      </Fragment>\n     \n  );\n}\n\nexport default AddTask;","import React from 'react';\n\nimport './RemainingTasks.css';\n\nfunction RemainingTasks() {\n  return <p className=\"remaining-tasks__status\">You have 3 tasks to do.</p>;\n}\n\nexport default RemainingTasks;\n","import React from 'react';\n\nimport completeIcon from '../icons/confirm.svg'\nimport deleteIcon from '../icons/close.svg'\n\nimport './TaskItem.css';\n\nfunction TaskItem(props) {\n  return (\n    <li className={`task task--${ props.status }`}>\n      <span className=\"task__text\">{ props.text }</span>\n      <div className=\"task__actions\">\n        { props.status === \"active\" && \n            <button type=\"button\" className=\"task__action-button task__complete-button\">\n              <img src={ completeIcon } alt=\"\" className=\"complete-svg\"/>\n              <span className=\"button--text\" aria-hidden=\"false\">Complete</span>\n            </button>\n        }\n\n        <button type=\"button\" className=\"task__action-button task__delete-button\">\n          <img src={ deleteIcon } alt=\"\" className=\"delete-svg\"/>\n          <span className=\"button--text\" aria-hidden=\"false\">Delete</span>\n        </button>\n      </div>\n    </li>\n  );\n}\n\nexport default TaskItem;","import React from 'react';\n\nimport TaskItem from \"../TaskItem/TaskItem\";\n\nimport './TaskList.css';\n\nfunction TaskList() {\n  return (\n    <div className=\"task-list\">\n        <ul className=\"task-list--all-active\">\n            <TaskItem text=\"Paint and oil outdoor furniture\" status=\"active\"/>\n            <TaskItem text=\"Hang pictures in bedroom\" status=\"active\"/>\n            <TaskItem text=\"Order party decorations\" status=\"active\"/>\n        </ul>\n        <ul className=\"task-list--all-complete\">\n            <TaskItem text=\"Order replacement printer toner\" status=\"complete\"/>\n            <TaskItem text=\"Organise Metrolink refund\" status=\"complete\"/>\n        </ul>\n  </div>\n  );\n}\n\nexport default TaskList;","import React from \"react\";\n\nimport Header from \"./Header/Header\";\nimport AddTask from \"./AddTask/AddTask\";\nimport RemainingTasks from \"./RemainingTasks/RemainingTasks\";\nimport TaskList from \"./TaskList/TaskList\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\" id=\"app\">\n      <Header />\n      <AddTask /> \n      <RemainingTasks />\n      <TaskList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}